version: "3.5"

# Used placement constraints:
#  - node.role == manager
#  - node.labels.db_role == master
#  - node.labels.backend_role == master
#  - node.labels.web_role == worker
# example: sudo docker node update --label-add role=db <NODE>

networks:
  default:
    driver: overlay
    attachable: true

services:
  db:
    image: postgres:11
    environment:
      POSTGRES_USER: docsearch
      POSTGRES_DB: docsearchdb
      POSTGRES_PASSWORD: haiRei3aiqu
    volumes:
      - type: bind
        source: ./volumes/db
        target: /var/lib/postgresql/data
      - type: bind
        source: ./db/init.sql
        target: /docker-entrypoint-initdb.d/init.sql
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        window: 10s
      placement:
        constraints:
          - node.labels.db_role == master

  backend:
    image: docsearch-backend:latest
    environment:
      DB_HOST: db
      DB_USER: docsearch
      DB_NAME: docsearchdb
      DB_PASSWORD: haiRei3aiqu
    command: python server.py
    depends_on:
      - db
    volumes:
      - type: bind
        source: ./nlp-core/data
        target: /srv/app/data/
    deploy:
      replicas: 1
      endpoint_mode: dnsrr
      restart_policy:
        condition: any
        delay: 1s
        window: 5s
      update_config:
        parallelism: 1
        delay: 2s
        failure_action: rollback
      placement:
        constraints:
        - node.labels.web_role == master

  nginx:
    image: nginx:latest
    environment:
      RESOLVER_VALID: 5s
    volumes:
      - type: bind
        source: ./volumes/assets
        target: /srv/assets
      - type: bind
        source: ./nginx/nginx.conf
        target: /etc/nginx/nginx.conf
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
    deploy:
      mode: global
      placement:
        constraints:
        - node.labels.nginx_role == master
      restart_policy:
        condition: any
        delay: 1s
